from unittest.mock import MagicMock

from nio.properties.exceptions import AllowNoneViolation
from nio.testing.block_test_case import NIOBlockTestCase
from ..udp_server_block import UDPServer, SingleUDPServer

DATA = b'\x02\\\x00\xabB\xee\x1e\xb8?>v\xc9B\xa2\x00\x00B\xb1\x00\x00@\x80r\xb0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xbd,\x081=,\x081\x00\x00\x00\x00\x00\x00\x00\x00A>m\x91A?\x02\x0c=L\xcc\xe0\xba\xd1\xc0\x00@\xa2\x95\xea9\xd1\x80\x009\xd1\x80\x00\xbb7\x80\x00A\xb9t&A\xb2\xaa\xe4\x00\x00\x00\x00\x00\x00\x00\x00A\xf2\x03\xd5A\xcc\xcc\xbd\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xbf\x80\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc0\xcc\xc0\x0c\xc0\x00\x00\x00\xc0\xcc\xc0\x0c\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'


class TestWebSocketServer(NIOBlockTestCase):

    def test_init(self):
        blk = UDPServer()
        self.assertIsNone(blk._server)

    def test_configure(self):
        blk = UDPServer()
        blk._create_server = MagicMock()
        self.configure_block(blk, {
            'host': '100.10.10.10',
            'port': 5009
        })
        self.assertEqual("100.10.10.10", blk.host())
        self.assertEqual(5009, blk.port())
        blk._create_server.assert_called_once_with()

    def test_configure_noport(self):
        blk = UDPServer()
        blk._create_server = MagicMock()

        with self.assertRaises(AllowNoneViolation):
            self.configure_block(blk, {
                'host': '100.10.10.10'
            })
        self.assertEqual("100.10.10.10", blk.host())
        blk._create_server.assert_not_called()

    def test_server_create(self):
        try:
            blk = UDPServer()
            self.configure_block(blk, {
                'host': '127.0.0.1',
                'port': 5008
            })
            self.assertEqual(SingleUDPServer, blk._server.__class__)
        except OSError as e:
            if e.errno == 10013:  # testing server may be blocking the port
                pass

    def test_server_start(self):
        blk = UDPServer()
        server = MagicMock()
        server.serve_forever = MagicMock()
        blk._create_server = MagicMock(return_value=server)
        self.configure_block(blk, {
            'host': '127.0.0.1',
            'port': 5008
        })
        blk.start()
        blk._server.serve_forever.assert_called_once_with()

    def test_server_stop(self):
        blk = UDPServer()
        server = MagicMock()
        server.serve_forever = MagicMock()
        server.shutdown = MagicMock()
        blk._create_server = MagicMock(return_value=server)
        self.configure_block(blk, {
            'host': '127.0.0.1',
            'port': 5008
        })
        blk.start()
        blk.stop()
        blk._server.shutdown.assert_called_once_with()

    def test_server_handle_input(self):
        blk = UDPServer()
        self.check_ok = False
        def notify_me(signals):
            self.assertEqual(1, len(signals))
            self.assertEqual(signals[0].data, DATA)
            self.check_ok = True

        blk.notify_signals = notify_me
        blk._handle_input(DATA)
        self.assertTrue(self.check_ok)
